{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Class UnmanagedCookieService - Holds static functions to deal with Cookies\r\n */\nvar UnmanagedCookieService = function () {\n  function UnmanagedCookieService() {}\n  /**\r\n   * Checks the existence of a single cookie by it's name\r\n   *\r\n   * @param  {string} name Identification of the cookie\r\n   * @returns existence of the cookie\r\n   */\n  UnmanagedCookieService.prototype.check = function (name) {\n    if (typeof document === \"undefined\") return false; // Check if document exist avoiding issues on server side prerendering\n    var regexp = new RegExp('(?:^' + name + '|;\\\\s*' + name + ')=(.*?)(?:;|$)', 'g');\n    var exists = regexp.test(document.cookie);\n    return exists;\n  };\n  /**\r\n   * Retrieves a single cookie by it's name\r\n   *\r\n   * @param  {string} name Identification of the Cookie\r\n   * @returns The Cookie's value\r\n   */\n  UnmanagedCookieService.prototype.get = function (name) {\n    if (this.check(name)) {\n      var regexp = new RegExp('(?:^' + name + '|;\\\\s*' + name + ')=(.*?)(?:;|$)', 'g');\n      var result = regexp.exec(document.cookie);\n      return result[1];\n    } else {\n      return '';\n    }\n  };\n  /**\r\n   * Retrieves a a list of all cookie avaiable\r\n   *\r\n   * @returns Object with all Cookies\r\n   */\n  UnmanagedCookieService.prototype.getAll = function () {\n    var cookies = {};\n    // tslint:disable-next-line:triple-equals\n    if (document.cookie && document.cookie != '') {\n      var split = document.cookie.split(';');\n      for (var _i = 0, split_1 = split; _i < split_1.length; _i++) {\n        var s = split_1[_i];\n        var currCookie = s.split('=');\n        currCookie[0] = currCookie[0].replace(/^ /, '');\n        cookies[currCookie[0]] = currCookie[1];\n      }\n    }\n    return cookies;\n  };\n  /**\r\n   * Save the Cookie\r\n   *\r\n   * @param  {string} name Cookie's identification\r\n   * @param  {string} value Cookie's value\r\n   * @param  {number} expires Cookie's expiration date in days from now or at a specific date from a Date object. If it's undefined the cookie is a session Cookie\r\n   * @param  {string} path Path relative to the domain where the cookie should be avaiable. Default /\r\n   * @param  {string} domain Domain where the cookie should be avaiable. Default current domain\r\n   * @param  {boolean} secure If true, the cookie will only be available through a secured connection\r\n   */\n  UnmanagedCookieService.prototype.set = function (name, value, expires, path, domain, secure) {\n    var cookieStr = name + '=' + value + ';';\n    if (expires) {\n      if (typeof expires === 'number') {\n        var dtExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);\n        cookieStr += 'expires=' + dtExpires.toUTCString() + ';';\n      } else {\n        cookieStr += 'expires=' + expires.toUTCString() + ';';\n      }\n    }\n    if (path) {\n      cookieStr += 'path=' + path + ';';\n    }\n    if (domain) {\n      cookieStr += 'domain=' + domain + ';';\n    }\n    if (secure) {\n      cookieStr += 'secure;';\n    }\n    // console.log(cookieStr);\n    document.cookie = cookieStr;\n  };\n  /**\r\n   * Removes specified Cookie\r\n   *\r\n   * @param  {string} name Cookie's identification\r\n   * @param  {string} path Path relative to the domain where the cookie should be avaiable. Default /\r\n   * @param  {string} domain Domain where the cookie should be avaiable. Default current domain\r\n   */\n  UnmanagedCookieService.prototype.delete = function (name, path, domain) {\n    this.set(name, '', -1, path, domain);\n  };\n  /**\r\n   * Delete all cookie avaiable\r\n   */\n  UnmanagedCookieService.prototype.deleteAll = function (path, domain) {\n    var cookies = this.getAll();\n    for (var _i = 0, _a = Object.keys(cookies); _i < _a.length; _i++) {\n      var cookieName = _a[_i];\n      this.delete(cookieName, path, domain);\n    }\n  };\n  return UnmanagedCookieService;\n}();\nexports.UnmanagedCookieService = UnmanagedCookieService;\nexports.UnmanagedCookie = new UnmanagedCookieService();\n//# sourceMappingURL=unmanagedCookie.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}