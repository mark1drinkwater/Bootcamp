{"ast":null,"code":"import { Cookie } from 'ng2-cookies';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class Foo {\n  constructor(id, name) {\n    this.id = id;\n    this.name = name;\n  }\n}\nexport let AppService = /*#__PURE__*/(() => {\n  var _class;\n  class AppService {\n    constructor(_http) {\n      this._http = _http;\n      this.jwtHelper = new JwtHelperService();\n      this.clientId = 'jwtClient';\n      this.organization = \"none\";\n      this.redirectUri = 'http://localhost:8084/';\n    }\n    retrieveToken(code) {\n      let params = new URLSearchParams();\n      params.append('grant_type', 'authorization_code');\n      params.append('client_id', this.clientId);\n      params.append('client_secret', 'jwtClientSecret');\n      params.append('redirect_uri', this.redirectUri);\n      params.append('code', code);\n      let headers = new HttpHeaders({\n        'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\n        'Authorization': 'Basic ' + btoa(this.clientId + \":secret\")\n      });\n      this._http.post('http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token', params.toString(), {\n        headers: headers\n      }).subscribe(data => this.saveToken(data), err => alert('Invalid Credentials'));\n    }\n    saveToken(token) {\n      var expireDate = new Date().getTime() + 1000 * token.expires_in;\n      Cookie.set(\"access_token\", token.access_token, expireDate);\n      console.log('Obtained Access token');\n      this.getOrganization();\n      window.location.href = 'http://localhost:8084';\n    }\n    getResource(resourceUrl) {\n      var headers = new HttpHeaders({\n        'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\n        'Authorization': 'Bearer ' + Cookie.get('access_token')\n      });\n      return this._http.get(resourceUrl, {\n        headers: headers\n      }).catch(error => Observable.throw(error.json().error || 'Server error'));\n    }\n    checkCredentials() {\n      return Cookie.check('access_token');\n    }\n    logout() {\n      Cookie.delete('access_token');\n      window.location.reload();\n    }\n    getOrganization() {\n      var token = Cookie.get(\"access_token\");\n      var payload = this.jwtHelper.decodeToken(token);\n      console.log(payload);\n      this.organization = payload.organization;\n      return this.organization;\n    }\n  }\n  _class = AppService;\n  _class.ɵfac = function AppService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  });\n  return AppService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}